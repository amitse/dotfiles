# ~/.zshrc - Zsh configuration
# This file is managed by chezmoi - edit the template
# Modular configuration using templates/partials/shell components

# Only run for interactive shells
[[ $- != *i* ]] && return

# Load shell configuration modules
{{- /* Core shell configuration - history, options, key bindings */ -}}
{{ include "templates/partials/shell/core.sh.tmpl" . }}

{{- /* Environment variables and exports */ -}}
{{ include "templates/partials/shell/exports.sh.tmpl" . }}

{{- /* PATH management */ -}}
{{ include "templates/partials/shell/paths.sh.tmpl" . }}

{{- /* Utility functions */ -}}
{{ include "templates/partials/shell/functions.sh.tmpl" . }}

# Zsh-specific configuration
setopt SHARE_HISTORY          # Share history between sessions
setopt HIST_VERIFY            # Show command before executing from history
setopt HIST_IGNORE_DUPS       # Ignore duplicate commands
setopt HIST_IGNORE_SPACE      # Ignore commands starting with space
setopt HIST_REDUCE_BLANKS     # Remove extra blanks from commands
setopt AUTO_CD                # Auto cd when typing directory name
setopt AUTO_PUSHD             # Push directories to stack
setopt PUSHD_IGNORE_DUPS      # Ignore duplicate directories in stack
setopt CORRECT                # Correct typos in commands
setopt CORRECT_ALL            # Correct typos in arguments

# Completion system
autoload -Uz compinit
compinit

# Case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
# Colored completion
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
# Menu selection
zstyle ':completion:*' menu select

# Key bindings
bindkey -e  # Emacs key bindings

# Better history search
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search
bindkey "^[[B" down-line-or-beginning-search

{{- if lookPath "fzf" }}
# FZF integration
if command -v fzf >/dev/null 2>&1; then
    # Key bindings
    source <(fzf --zsh) 2>/dev/null || {
        # Fallback for older fzf versions
        if [ -f ~/.fzf.zsh ]; then
            source ~/.fzf.zsh
        elif [ -f /usr/share/fzf/key-bindings.zsh ]; then
            source /usr/share/fzf/key-bindings.zsh
            source /usr/share/fzf/completion.zsh
        fi
    }
fi
{{- end }}

{{- if lookPath "zoxide" }}
# Zoxide integration (smart cd)
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
fi
{{- end }}

# Prompt configuration
autoload -Uz vcs_info
precmd() { vcs_info }

# Git branch info
zstyle ':vcs_info:git:*' formats ' (%b)'
zstyle ':vcs_info:*' enable git

setopt PROMPT_SUBST

# Simple but informative prompt
{{- if eq .chezmoi.os "linux" }}
PROMPT='%F{green}%n@%m%f:%F{blue}%~%f%F{red}${vcs_info_msg_0_}%f$ '
{{- else if eq .chezmoi.os "darwin" }}
PROMPT='%F{cyan}%n@%m%f:%F{blue}%~%f%F{red}${vcs_info_msg_0_}%f$ '
{{- else }}
PROMPT='%F{yellow}%n@%m%f:%F{blue}%~%f%F{red}${vcs_info_msg_0_}%f$ '
{{- end }}

# Source additional configuration files
if [ -f ~/.config/shell/aliases.sh ]; then
    source ~/.config/shell/aliases.sh
fi

if [ -f ~/.zsh_aliases ]; then
    source ~/.zsh_aliases
fi

if [ -f ~/.zsh_functions ]; then
    source ~/.zsh_functions
fi

# Load local customizations if they exist
if [ -f ~/.zshrc.local ]; then
    source ~/.zshrc.local
fi

# Welcome message (optional)
{{- if eq .profile "developer" }}
# Developer profile welcome
if [[ -o interactive ]]; then
    echo "ðŸš€ Developer profile loaded"
    {{- if lookPath "git" }}
    echo "Git: $(git --version 2>/dev/null || echo 'not found')"
    {{- end }}
    {{- if lookPath "node" }}
    echo "Node: $(node --version 2>/dev/null || echo 'not found')"
    {{- end }}
    {{- if lookPath "python" }}
    echo "Python: $(python3 --version 2>/dev/null || echo 'not found')"
    {{- end }}
fi
{{- else if eq .profile "power-user" }}
# Power user profile welcome
if [[ -o interactive ]]; then
    echo "âš¡ Power user profile loaded"
    echo "Type 'functions_help' for available functions"
fi
{{- end }}
