#!/bin/bash
# Install essential tools based on detected package manager and user profile
# This script runs once before applying configurations

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}📦 $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Detect package manager
detect_package_manager() {
    if command -v apt >/dev/null 2>&1; then
        echo "apt"
    elif command -v yum >/dev/null 2>&1; then
        echo "yum"
    elif command -v dnf >/dev/null 2>&1; then
        echo "dnf"
    elif command -v pacman >/dev/null 2>&1; then
        echo "pacman"
    elif command -v brew >/dev/null 2>&1; then
        echo "brew"
    elif command -v winget >/dev/null 2>&1; then
        echo "winget"
    elif command -v scoop >/dev/null 2>&1; then
        echo "scoop"
    elif command -v choco >/dev/null 2>&1; then
        echo "choco"
    else
        echo "none"
    fi
}

# Install tools based on package manager
install_tools() {
    local pm="$1"
    local profile="power-user"
    
    log_info "Installing tools for profile: $profile"
    log_info "Using package manager: $pm"
    
    # Essential tools for power user setup
    local essential_tools=(
        "git"
        "tmux"
        "fzf"
        "ripgrep"
        "bat"
        "zoxide"
        "exa"
        "entr"
        "gh"
        "delta"
        "fd"
    )
    
    # Optional tools
    local optional_tools=(
        "lazygit"
        "gitui"
        "bottom"
        "dust"
    )
    
    # Install essential tools
    for tool in "${essential_tools[@]}"; do
        install_tool "$pm" "$tool" "essential"
    done
    
    # Install optional tools (non-fatal if they fail)
    for tool in "${optional_tools[@]}"; do
        install_tool "$pm" "$tool" "optional"
    done
}

# Get the correct package name for the tool
get_package_name() {
    local tool="$1"
    local pm="$2"
    
    case "$tool" in
        "fd")
            case "$pm" in
                "apt") echo "fd-find" ;;
                *) echo "$tool" ;;
            esac
            ;;
        "ripgrep")
            case "$pm" in
                "apt") echo "ripgrep" ;;
                *) echo "$tool" ;;
            esac
            ;;
        "bat")
            case "$pm" in
                "apt") echo "bat" ;;
                *) echo "$tool" ;;
            esac
            ;;
        *)
            echo "$tool"
            ;;
    esac
}

# Install individual tool
install_tool() {
    local pm="$1"
    local tool="$2"
    local type="$3"
    local package_name
    
    # Check if tool is already available
    if command -v "$tool" >/dev/null 2>&1; then
        log_success "$tool already installed"
        return 0
    fi
    
    log_info "Installing $tool..."
    
    # Get the correct package name
    package_name=$(get_package_name "$tool" "$pm")
    
    case "$pm" in
        "apt")
            if sudo apt update >/dev/null 2>&1 && sudo apt install -y "$package_name" >/dev/null 2>&1; then
                log_success "$tool installed via apt"
            else
                handle_install_failure "$tool" "$type"
            fi
            ;;
        "yum")
            if sudo yum install -y "$package_name" >/dev/null 2>&1; then
                log_success "$tool installed via yum"
            else
                handle_install_failure "$tool" "$type"
            fi
            ;;
        "dnf")
            if sudo dnf install -y "$package_name" >/dev/null 2>&1; then
                log_success "$tool installed via dnf"
            else
                handle_install_failure "$tool" "$type"
            fi
            ;;
        "pacman")
            if sudo pacman -S --noconfirm "$package_name" >/dev/null 2>&1; then
                log_success "$tool installed via pacman"
            else
                handle_install_failure "$tool" "$type"
            fi
            ;;
        "brew")
            if brew install "$package_name" >/dev/null 2>&1; then
                log_success "$tool installed via brew"
            else
                handle_install_failure "$tool" "$type"
            fi
            ;;
        "winget")
            # Map common tool names to winget package IDs
            local winget_id="$tool"
            case "$tool" in
                "git") winget_id="Git.Git" ;;
                "gh") winget_id="GitHub.cli" ;;
                "fzf") winget_id="junegunn.fzf" ;;
                "rg"|"ripgrep") winget_id="BurntSushi.ripgrep.MSVC" ;;
                "bat") winget_id="sharkdp.bat" ;;
                "zoxide") winget_id="ajeetdsouza.zoxide" ;;
                "fd") winget_id="sharkdp.fd" ;;
                "exa") winget_id="ogham.exa" ;;
            esac
            
            if winget install "$winget_id" --silent >/dev/null 2>&1; then
                log_success "$tool installed via winget"
            else
                handle_install_failure "$tool" "$type"
            fi
            ;;
        "scoop")
            if scoop install "$tool" >/dev/null 2>&1; then
                log_success "$tool installed via scoop"
            else
                handle_install_failure "$tool" "$type"
            fi
            ;;
        "choco")
            if choco install "$tool" -y >/dev/null 2>&1; then
                log_success "$tool installed via chocolatey"
            else
                handle_install_failure "$tool" "$type"
            fi
            ;;
        "none")
            log_warning "No package manager detected - cannot install $tool"
            ;;
        *)
            log_error "Unknown package manager: $pm"
            ;;
    esac
}

# Handle installation failures
handle_install_failure() {
    local tool="$1"
    local type="$2"
    
    if [ "$type" = "essential" ]; then
        log_error "Failed to install essential tool: $tool"
        log_info "Please install $tool manually"
    else
        log_warning "Failed to install optional tool: $tool (continuing...)"
    fi
}

# Main execution
main() {
    log_info "Starting tool installation for power-user profile..."
    
    local pm
    pm=$(detect_package_manager)
    
    if [ "$pm" = "none" ]; then
        log_warning "No package manager detected"
        log_info "Please install tools manually:"
        log_info "  - git"
        log_info "  - tmux"
        log_info "  - fzf"
        log_info "  - ripgrep"
        log_info "  - bat"
        log_info "  - zoxide"
        log_info "  - exa"
        log_info "  - entr"
        log_info "  - gh"
        log_info "  - delta"
        log_info "  - fd"
        log_info "  - lazygit (optional)"
        log_info "  - gitui (optional)"
        log_info "  - bottom (optional)"
        log_info "  - dust (optional)"
        return 0
    fi
    
    install_tools "$pm"
    
    log_success "Tool installation completed!"
    
    # Verify essential tools are available
    log_info "Verifying essential tools..."
    local missing_tools=()
    
    # Check essential tools
    for tool in "git" "tmux" "fzf" "ripgrep" "bat" "zoxide" "exa" "entr" "gh" "delta" "fd"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            missing_tools+=("$tool")
        fi
    done
    
    if [ ${#missing_tools[@]} -eq 0 ]; then
        log_success "All essential tools are available"
    else
        log_warning "Some essential tools are missing: ${missing_tools[*]}"
        log_info "Configurations will adapt to available tools"
    fi
}

# Only run if not sourced
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi